//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FleetClients.FleetManagerServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServiceCallData", Namespace="http://schemas.datacontract.org/2004/07/Services")]
    [System.SerializableAttribute()]
    public partial class ServiceCallData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private FleetClients.FleetManagerServiceReference.ServiceCode ServiceCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SourceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StackTraceField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public FleetClients.FleetManagerServiceReference.ServiceCode ServiceCode {
            get {
                return this.ServiceCodeField;
            }
            set {
                if ((this.ServiceCodeField.Equals(value) != true)) {
                    this.ServiceCodeField = value;
                    this.RaisePropertyChanged("ServiceCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Source {
            get {
                return this.SourceField;
            }
            set {
                if ((object.ReferenceEquals(this.SourceField, value) != true)) {
                    this.SourceField = value;
                    this.RaisePropertyChanged("Source");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StackTrace {
            get {
                return this.StackTraceField;
            }
            set {
                if ((object.ReferenceEquals(this.StackTraceField, value) != true)) {
                    this.StackTraceField = value;
                    this.RaisePropertyChanged("StackTrace");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServiceCode", Namespace="http://schemas.datacontract.org/2004/07/Services")]
    public enum ServiceCode : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NOERROR = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SERVICENOTCONFIGURED = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CLIENTEXCEPTION = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SERVICEUNAVAILABLE = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SERVICENOTIMPLEMENTED = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        INTERNALERROR = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        COMMITJOBFAILED = 1001,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CREATEJOBFAILED = 1002,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CREATEUNORDEREDLISTTASKFAILED = 1003,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CREATEATOMICMOVELISTTASKFAILED = 1004,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CREATEORDEREDLISTTASKFAILED = 1005,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CREATESERVICINGTASKFAILED = 1006,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NOTACCEPTINGNEWJOBS = 1007,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DIRECTIVENOTALLOWED = 1008,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        INVALIDNODETASKID = 1009,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CREATESLEEPINGTASKFAILED = 1010,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CREATEGOTONODETASKFAILED = 1011,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CREATEATOMICMOVETASKFAILED = 1012,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        BEGINEDITINGJOBFAILED = 1013,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FINISHEDITINGJOBFAILED = 1014,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        BEGINEDITINGTASKFAILED = 1015,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FINISHEDITINGTASKFAILED = 1016,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CREATEAWAITINGTASKFAILED = 1017,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ABORTALLJOBSFAILED = 2001,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ABORTALLJOBSFORAGENTFAILED = 2002,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ABORTJOBFAILED = 2003,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        GETACTIVEJOBSFORAGENTFAILED = 2004,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ABORTTASKFAILED = 2005,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        RESOLVEFAULTEDJOBFAILED = 2006,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        RESOLVEFAULTEDTASKFAILED = 2007,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        GETJOBSTATEFAILED = 3001,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        INVALIDJOBID = 3002,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        INVALIDTASKID = 3003,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        GETALLMOVEDATAFAILED = 4001,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        GETALLNODEDATAFAILED = 4002,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        GETMAPPINGKEYCARDSIGNATUREFAILED = 4003,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        GETRAJECTORYFAILED = 4004,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        INVALIDMOVEID = 4005,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SETOCCUPYINGMANDATEFAILED = 4006,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CLEAROCCUPYINGMANDATEFAILED = 4007,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CONTAINSINVALIDMAPITEMIDS = 4008,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CONTAINSINVALIDTIMEOUT = 4009,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        OCCUPATIONALREADYINPROGRESS = 4010,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        GETOCCUPYINGMANDATEPROGRESSDATAFAILED = 4011,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        GETOUTSTANDINGSERVICEREQUESTSFAILED = 5001,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SETSERVICECOMPLETEFAILED = 5002,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        GETALLAGENTDATAFAILED = 6001,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        GETALLAGENTSINLIFETIMESTATEFAILED = 6002,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SETAGENTLIFETIMESTATEFAILED = 6003,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        COMMITINSTRUCTIONFAILED = 7001,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        REQUESTFREEZEFAILED = 7002,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        REQUESTUNFREEZEFAILED = 7003,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        INCORRECTNUMBEROFBYTES = 7004,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        COMMITEXTENDEDWAYPOINTSFAILED = 7005,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        GETKINGPINDESCRIPTIONFAILED = 7008,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CREATEVIRTUALVEHICLEFAILED = 7009,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        REMOVEVEHICLEFAILED = 7010,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SETPOSEFAILED = 7011,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        RESETKINGPINFAILED = 7012,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ENABLEALLVEHICLESFAILED = 7013,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DISABLEALLVEHICLESFAILED = 7014,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        INVALIDIPADDRESS = 7015,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ENABLEVEHICLEFAILED = 7016,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DISABLEVEHICLEFAILED = 7017,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SETFLEETSTATEFAILED = 7018,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SETKINGPINSTATEFAILED = 7019,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DOWNLOADFAILED = 8001,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UPLOADFAILED = 8002,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        GETFILENAMESFAILED = 8003,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        INVALIDAGENTID = 9001,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        INVALIDSTATECASTVARIABLEALIAS = 9002,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        STATECASTVARIABLEDATATYPEMISMATCH = 9003,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        GETSCHEDULERVERSIONFAILED = 10001,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        GETPLUGINVERSIONSFAILED = 10002,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        GETOUTSTANDINGAGENTREQUESTSFAILED = 11001,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PoseData", Namespace="http://schemas.datacontract.org/2004/07/Controllers.Vehicles.Fleet")]
    [System.SerializableAttribute()]
    public partial class PoseData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double HeadingField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double XField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double YField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Heading {
            get {
                return this.HeadingField;
            }
            set {
                if ((this.HeadingField.Equals(value) != true)) {
                    this.HeadingField = value;
                    this.RaisePropertyChanged("Heading");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double X {
            get {
                return this.XField;
            }
            set {
                if ((this.XField.Equals(value) != true)) {
                    this.XField = value;
                    this.RaisePropertyChanged("X");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Y {
            get {
                return this.YField;
            }
            set {
                if ((this.YField.Equals(value) != true)) {
                    this.YField = value;
                    this.RaisePropertyChanged("Y");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="VehicleControllerState", Namespace="http://schemas.datacontract.org/2004/07/Controllers.Vehicles")]
    public enum VehicleControllerState : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Enabled = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Disabled = 1,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FleetState", Namespace="http://schemas.datacontract.org/2004/07/Controllers.Vehicles.Fleet")]
    [System.SerializableAttribute()]
    public partial class FleetState : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private FleetClients.FleetManagerServiceReference.KingpinState[] KingpinStatesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte TickField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public FleetClients.FleetManagerServiceReference.KingpinState[] KingpinStates {
            get {
                return this.KingpinStatesField;
            }
            set {
                if ((object.ReferenceEquals(this.KingpinStatesField, value) != true)) {
                    this.KingpinStatesField = value;
                    this.RaisePropertyChanged("KingpinStates");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte Tick {
            get {
                return this.TickField;
            }
            set {
                if ((this.TickField.Equals(value) != true)) {
                    this.TickField = value;
                    this.RaisePropertyChanged("Tick");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="KingpinState", Namespace="http://schemas.datacontract.org/2004/07/Kingpin")]
    [System.SerializableAttribute()]
    public partial class KingpinState : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private FleetClients.FleetManagerServiceReference.AgvMode AgvModeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double BatteryChargePercentageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private FleetClients.FleetManagerServiceReference.DynamicLimiterStatus DynamicLimiterStatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private FleetClients.FleetManagerServiceReference.ExtendedDataFaultStatus ExtendedDataFaultStatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private FleetClients.FleetManagerServiceReference.FrozenState FrozenStateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float HeadingField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Net.IPAddress IPAddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsChargingField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int LastCompletedInstructionIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private FleetClients.FleetManagerServiceReference.NavigationStatus NavigationStatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private FleetClients.FleetManagerServiceReference.PositionControlStatus PositionControlStatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double SpeedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] StateCastExtendedDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.TimeSpan StationaryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte TickField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int WaypointLastIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int WaypointNextIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float XField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float YField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public FleetClients.FleetManagerServiceReference.AgvMode AgvMode {
            get {
                return this.AgvModeField;
            }
            set {
                if ((this.AgvModeField.Equals(value) != true)) {
                    this.AgvModeField = value;
                    this.RaisePropertyChanged("AgvMode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double BatteryChargePercentage {
            get {
                return this.BatteryChargePercentageField;
            }
            set {
                if ((this.BatteryChargePercentageField.Equals(value) != true)) {
                    this.BatteryChargePercentageField = value;
                    this.RaisePropertyChanged("BatteryChargePercentage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public FleetClients.FleetManagerServiceReference.DynamicLimiterStatus DynamicLimiterStatus {
            get {
                return this.DynamicLimiterStatusField;
            }
            set {
                if ((this.DynamicLimiterStatusField.Equals(value) != true)) {
                    this.DynamicLimiterStatusField = value;
                    this.RaisePropertyChanged("DynamicLimiterStatus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public FleetClients.FleetManagerServiceReference.ExtendedDataFaultStatus ExtendedDataFaultStatus {
            get {
                return this.ExtendedDataFaultStatusField;
            }
            set {
                if ((this.ExtendedDataFaultStatusField.Equals(value) != true)) {
                    this.ExtendedDataFaultStatusField = value;
                    this.RaisePropertyChanged("ExtendedDataFaultStatus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public FleetClients.FleetManagerServiceReference.FrozenState FrozenState {
            get {
                return this.FrozenStateField;
            }
            set {
                if ((this.FrozenStateField.Equals(value) != true)) {
                    this.FrozenStateField = value;
                    this.RaisePropertyChanged("FrozenState");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float Heading {
            get {
                return this.HeadingField;
            }
            set {
                if ((this.HeadingField.Equals(value) != true)) {
                    this.HeadingField = value;
                    this.RaisePropertyChanged("Heading");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Net.IPAddress IPAddress {
            get {
                return this.IPAddressField;
            }
            set {
                if ((object.ReferenceEquals(this.IPAddressField, value) != true)) {
                    this.IPAddressField = value;
                    this.RaisePropertyChanged("IPAddress");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsCharging {
            get {
                return this.IsChargingField;
            }
            set {
                if ((this.IsChargingField.Equals(value) != true)) {
                    this.IsChargingField = value;
                    this.RaisePropertyChanged("IsCharging");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int LastCompletedInstructionId {
            get {
                return this.LastCompletedInstructionIdField;
            }
            set {
                if ((this.LastCompletedInstructionIdField.Equals(value) != true)) {
                    this.LastCompletedInstructionIdField = value;
                    this.RaisePropertyChanged("LastCompletedInstructionId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public FleetClients.FleetManagerServiceReference.NavigationStatus NavigationStatus {
            get {
                return this.NavigationStatusField;
            }
            set {
                if ((this.NavigationStatusField.Equals(value) != true)) {
                    this.NavigationStatusField = value;
                    this.RaisePropertyChanged("NavigationStatus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public FleetClients.FleetManagerServiceReference.PositionControlStatus PositionControlStatus {
            get {
                return this.PositionControlStatusField;
            }
            set {
                if ((this.PositionControlStatusField.Equals(value) != true)) {
                    this.PositionControlStatusField = value;
                    this.RaisePropertyChanged("PositionControlStatus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Speed {
            get {
                return this.SpeedField;
            }
            set {
                if ((this.SpeedField.Equals(value) != true)) {
                    this.SpeedField = value;
                    this.RaisePropertyChanged("Speed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] StateCastExtendedData {
            get {
                return this.StateCastExtendedDataField;
            }
            set {
                if ((object.ReferenceEquals(this.StateCastExtendedDataField, value) != true)) {
                    this.StateCastExtendedDataField = value;
                    this.RaisePropertyChanged("StateCastExtendedData");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan Stationary {
            get {
                return this.StationaryField;
            }
            set {
                if ((this.StationaryField.Equals(value) != true)) {
                    this.StationaryField = value;
                    this.RaisePropertyChanged("Stationary");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte Tick {
            get {
                return this.TickField;
            }
            set {
                if ((this.TickField.Equals(value) != true)) {
                    this.TickField = value;
                    this.RaisePropertyChanged("Tick");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int WaypointLastId {
            get {
                return this.WaypointLastIdField;
            }
            set {
                if ((this.WaypointLastIdField.Equals(value) != true)) {
                    this.WaypointLastIdField = value;
                    this.RaisePropertyChanged("WaypointLastId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int WaypointNextId {
            get {
                return this.WaypointNextIdField;
            }
            set {
                if ((this.WaypointNextIdField.Equals(value) != true)) {
                    this.WaypointNextIdField = value;
                    this.RaisePropertyChanged("WaypointNextId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float X {
            get {
                return this.XField;
            }
            set {
                if ((this.XField.Equals(value) != true)) {
                    this.XField = value;
                    this.RaisePropertyChanged("X");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float Y {
            get {
                return this.YField;
            }
            set {
                if ((this.YField.Equals(value) != true)) {
                    this.YField = value;
                    this.RaisePropertyChanged("Y");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AgvMode", Namespace="http://schemas.datacontract.org/2004/07/Kingpin.Architecture")]
    public enum AgvMode : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Automatic = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Manual = 0,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DynamicLimiterStatus", Namespace="http://schemas.datacontract.org/2004/07/Kingpin.Architecture")]
    public enum DynamicLimiterStatus : ushort {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        OK = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SafetySensor = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Warning_1 = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Warning_2 = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MotorFault = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FastStop = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        GoSlow = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Unknown = 65535,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ExtendedDataFaultStatus", Namespace="http://schemas.datacontract.org/2004/07/Kingpin.Architecture")]
    public enum ExtendedDataFaultStatus : byte {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        OK = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Fault = 1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FrozenState", Namespace="http://schemas.datacontract.org/2004/07/Kingpin.Architecture")]
    public enum FrozenState : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Frozen = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Unfrozen = 1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="NavigationStatus", Namespace="http://schemas.datacontract.org/2004/07/Kingpin.Architecture")]
    public enum NavigationStatus : ushort {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        OK = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Lost = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AssociationFailure = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        HighUncertainty = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PoorAssociaton = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NoResponse = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Unknown = 65535,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PositionControlStatus", Namespace="http://schemas.datacontract.org/2004/07/Kingpin.Architecture")]
    public enum PositionControlStatus : ushort {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        OK = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Disabled = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Disabling = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NoWaypoints = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        OutOfPosition = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        WaypointDiscontinuity = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Unknown = 65535,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="FleetManagerServiceReference.IFleetManagerService", CallbackContract=typeof(FleetClients.FleetManagerServiceReference.IFleetManagerServiceCallback))]
    public interface IFleetManagerService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/VersionMajor", ReplyAction="http://tempuri.org/IService/VersionMajorResponse")]
        int VersionMajor();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/VersionMajor", ReplyAction="http://tempuri.org/IService/VersionMajorResponse")]
        System.Threading.Tasks.Task<int> VersionMajorAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/VersionMinor", ReplyAction="http://tempuri.org/IService/VersionMinorResponse")]
        int VersionMinor();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/VersionMinor", ReplyAction="http://tempuri.org/IService/VersionMinorResponse")]
        System.Threading.Tasks.Task<int> VersionMinorAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/VersionPatch", ReplyAction="http://tempuri.org/IService/VersionPatchResponse")]
        int VersionPatch();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/VersionPatch", ReplyAction="http://tempuri.org/IService/VersionPatchResponse")]
        System.Threading.Tasks.Task<int> VersionPatchAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISubscriptionService/SubscriptionHeartbeat", ReplyAction="http://tempuri.org/ISubscriptionService/SubscriptionHeartbeatResponse")]
        void SubscriptionHeartbeat(System.Guid guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISubscriptionService/SubscriptionHeartbeat", ReplyAction="http://tempuri.org/ISubscriptionService/SubscriptionHeartbeatResponse")]
        System.Threading.Tasks.Task SubscriptionHeartbeatAsync(System.Guid guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFleetManagerService/GetKingpinDescription", ReplyAction="http://tempuri.org/IFleetManagerService/GetKingpinDescriptionResponse")]
        System.Tuple<System.Xml.Linq.XElement, FleetClients.FleetManagerServiceReference.ServiceCallData> GetKingpinDescription(System.Net.IPAddress ipAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFleetManagerService/GetKingpinDescription", ReplyAction="http://tempuri.org/IFleetManagerService/GetKingpinDescriptionResponse")]
        System.Threading.Tasks.Task<System.Tuple<System.Xml.Linq.XElement, FleetClients.FleetManagerServiceReference.ServiceCallData>> GetKingpinDescriptionAsync(System.Net.IPAddress ipAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFleetManagerService/CommitEx2Waypoints", ReplyAction="http://tempuri.org/IFleetManagerService/CommitEx2WaypointsResponse")]
        System.Tuple<bool, FleetClients.FleetManagerServiceReference.ServiceCallData> CommitEx2Waypoints(System.Net.IPAddress ipAddress, int instructionId, byte[] ex2WaypointBytes);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFleetManagerService/CommitEx2Waypoints", ReplyAction="http://tempuri.org/IFleetManagerService/CommitEx2WaypointsResponse")]
        System.Threading.Tasks.Task<System.Tuple<bool, FleetClients.FleetManagerServiceReference.ServiceCallData>> CommitEx2WaypointsAsync(System.Net.IPAddress ipAddress, int instructionId, byte[] ex2WaypointBytes);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFleetManagerService/RequestFreeze", ReplyAction="http://tempuri.org/IFleetManagerService/RequestFreezeResponse")]
        System.Tuple<bool, FleetClients.FleetManagerServiceReference.ServiceCallData> RequestFreeze();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFleetManagerService/RequestFreeze", ReplyAction="http://tempuri.org/IFleetManagerService/RequestFreezeResponse")]
        System.Threading.Tasks.Task<System.Tuple<bool, FleetClients.FleetManagerServiceReference.ServiceCallData>> RequestFreezeAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFleetManagerService/RequestUnfreeze", ReplyAction="http://tempuri.org/IFleetManagerService/RequestUnfreezeResponse")]
        System.Tuple<bool, FleetClients.FleetManagerServiceReference.ServiceCallData> RequestUnfreeze();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFleetManagerService/RequestUnfreeze", ReplyAction="http://tempuri.org/IFleetManagerService/RequestUnfreezeResponse")]
        System.Threading.Tasks.Task<System.Tuple<bool, FleetClients.FleetManagerServiceReference.ServiceCallData>> RequestUnfreezeAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFleetManagerService/CreateVirtualVehicle", ReplyAction="http://tempuri.org/IFleetManagerService/CreateVirtualVehicleResponse")]
        System.Tuple<bool, FleetClients.FleetManagerServiceReference.ServiceCallData> CreateVirtualVehicle(System.Net.IPAddress ipAddress, FleetClients.FleetManagerServiceReference.PoseData pose);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFleetManagerService/CreateVirtualVehicle", ReplyAction="http://tempuri.org/IFleetManagerService/CreateVirtualVehicleResponse")]
        System.Threading.Tasks.Task<System.Tuple<bool, FleetClients.FleetManagerServiceReference.ServiceCallData>> CreateVirtualVehicleAsync(System.Net.IPAddress ipAddress, FleetClients.FleetManagerServiceReference.PoseData pose);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFleetManagerService/RemoveVehicle", ReplyAction="http://tempuri.org/IFleetManagerService/RemoveVehicleResponse")]
        System.Tuple<bool, FleetClients.FleetManagerServiceReference.ServiceCallData> RemoveVehicle(System.Net.IPAddress ipAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFleetManagerService/RemoveVehicle", ReplyAction="http://tempuri.org/IFleetManagerService/RemoveVehicleResponse")]
        System.Threading.Tasks.Task<System.Tuple<bool, FleetClients.FleetManagerServiceReference.ServiceCallData>> RemoveVehicleAsync(System.Net.IPAddress ipAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFleetManagerService/SetPose", ReplyAction="http://tempuri.org/IFleetManagerService/SetPoseResponse")]
        System.Tuple<bool, FleetClients.FleetManagerServiceReference.ServiceCallData> SetPose(System.Net.IPAddress ipAddress, FleetClients.FleetManagerServiceReference.PoseData pose);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFleetManagerService/SetPose", ReplyAction="http://tempuri.org/IFleetManagerService/SetPoseResponse")]
        System.Threading.Tasks.Task<System.Tuple<bool, FleetClients.FleetManagerServiceReference.ServiceCallData>> SetPoseAsync(System.Net.IPAddress ipAddress, FleetClients.FleetManagerServiceReference.PoseData pose);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFleetManagerService/ResetKingpin", ReplyAction="http://tempuri.org/IFleetManagerService/ResetKingpinResponse")]
        System.Tuple<bool, FleetClients.FleetManagerServiceReference.ServiceCallData> ResetKingpin(System.Net.IPAddress ipAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFleetManagerService/ResetKingpin", ReplyAction="http://tempuri.org/IFleetManagerService/ResetKingpinResponse")]
        System.Threading.Tasks.Task<System.Tuple<bool, FleetClients.FleetManagerServiceReference.ServiceCallData>> ResetKingpinAsync(System.Net.IPAddress ipAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFleetManagerService/SetFleetState", ReplyAction="http://tempuri.org/IFleetManagerService/SetFleetStateResponse")]
        System.Tuple<bool, FleetClients.FleetManagerServiceReference.ServiceCallData> SetFleetState(FleetClients.FleetManagerServiceReference.VehicleControllerState controllerState);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFleetManagerService/SetFleetState", ReplyAction="http://tempuri.org/IFleetManagerService/SetFleetStateResponse")]
        System.Threading.Tasks.Task<System.Tuple<bool, FleetClients.FleetManagerServiceReference.ServiceCallData>> SetFleetStateAsync(FleetClients.FleetManagerServiceReference.VehicleControllerState controllerState);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFleetManagerService/SetKingpinState", ReplyAction="http://tempuri.org/IFleetManagerService/SetKingpinStateResponse")]
        System.Tuple<bool, FleetClients.FleetManagerServiceReference.ServiceCallData> SetKingpinState(System.Net.IPAddress ipAddress, FleetClients.FleetManagerServiceReference.VehicleControllerState controllerState);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFleetManagerService/SetKingpinState", ReplyAction="http://tempuri.org/IFleetManagerService/SetKingpinStateResponse")]
        System.Threading.Tasks.Task<System.Tuple<bool, FleetClients.FleetManagerServiceReference.ServiceCallData>> SetKingpinStateAsync(System.Net.IPAddress ipAddress, FleetClients.FleetManagerServiceReference.VehicleControllerState controllerState);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFleetManagerServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFleetManagerService/OnCallback", ReplyAction="http://tempuri.org/IFleetManagerService/OnCallbackResponse")]
        void OnCallback(FleetClients.FleetManagerServiceReference.FleetState callbackObject);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFleetManagerServiceChannel : FleetClients.FleetManagerServiceReference.IFleetManagerService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FleetManagerServiceClient : System.ServiceModel.DuplexClientBase<FleetClients.FleetManagerServiceReference.IFleetManagerService>, FleetClients.FleetManagerServiceReference.IFleetManagerService {
        
        public FleetManagerServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public FleetManagerServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public FleetManagerServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public FleetManagerServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public FleetManagerServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public int VersionMajor() {
            return base.Channel.VersionMajor();
        }
        
        public System.Threading.Tasks.Task<int> VersionMajorAsync() {
            return base.Channel.VersionMajorAsync();
        }
        
        public int VersionMinor() {
            return base.Channel.VersionMinor();
        }
        
        public System.Threading.Tasks.Task<int> VersionMinorAsync() {
            return base.Channel.VersionMinorAsync();
        }
        
        public int VersionPatch() {
            return base.Channel.VersionPatch();
        }
        
        public System.Threading.Tasks.Task<int> VersionPatchAsync() {
            return base.Channel.VersionPatchAsync();
        }
        
        public void SubscriptionHeartbeat(System.Guid guid) {
            base.Channel.SubscriptionHeartbeat(guid);
        }
        
        public System.Threading.Tasks.Task SubscriptionHeartbeatAsync(System.Guid guid) {
            return base.Channel.SubscriptionHeartbeatAsync(guid);
        }
        
        public System.Tuple<System.Xml.Linq.XElement, FleetClients.FleetManagerServiceReference.ServiceCallData> GetKingpinDescription(System.Net.IPAddress ipAddress) {
            return base.Channel.GetKingpinDescription(ipAddress);
        }
        
        public System.Threading.Tasks.Task<System.Tuple<System.Xml.Linq.XElement, FleetClients.FleetManagerServiceReference.ServiceCallData>> GetKingpinDescriptionAsync(System.Net.IPAddress ipAddress) {
            return base.Channel.GetKingpinDescriptionAsync(ipAddress);
        }
        
        public System.Tuple<bool, FleetClients.FleetManagerServiceReference.ServiceCallData> CommitEx2Waypoints(System.Net.IPAddress ipAddress, int instructionId, byte[] ex2WaypointBytes) {
            return base.Channel.CommitEx2Waypoints(ipAddress, instructionId, ex2WaypointBytes);
        }
        
        public System.Threading.Tasks.Task<System.Tuple<bool, FleetClients.FleetManagerServiceReference.ServiceCallData>> CommitEx2WaypointsAsync(System.Net.IPAddress ipAddress, int instructionId, byte[] ex2WaypointBytes) {
            return base.Channel.CommitEx2WaypointsAsync(ipAddress, instructionId, ex2WaypointBytes);
        }
        
        public System.Tuple<bool, FleetClients.FleetManagerServiceReference.ServiceCallData> RequestFreeze() {
            return base.Channel.RequestFreeze();
        }
        
        public System.Threading.Tasks.Task<System.Tuple<bool, FleetClients.FleetManagerServiceReference.ServiceCallData>> RequestFreezeAsync() {
            return base.Channel.RequestFreezeAsync();
        }
        
        public System.Tuple<bool, FleetClients.FleetManagerServiceReference.ServiceCallData> RequestUnfreeze() {
            return base.Channel.RequestUnfreeze();
        }
        
        public System.Threading.Tasks.Task<System.Tuple<bool, FleetClients.FleetManagerServiceReference.ServiceCallData>> RequestUnfreezeAsync() {
            return base.Channel.RequestUnfreezeAsync();
        }
        
        public System.Tuple<bool, FleetClients.FleetManagerServiceReference.ServiceCallData> CreateVirtualVehicle(System.Net.IPAddress ipAddress, FleetClients.FleetManagerServiceReference.PoseData pose) {
            return base.Channel.CreateVirtualVehicle(ipAddress, pose);
        }
        
        public System.Threading.Tasks.Task<System.Tuple<bool, FleetClients.FleetManagerServiceReference.ServiceCallData>> CreateVirtualVehicleAsync(System.Net.IPAddress ipAddress, FleetClients.FleetManagerServiceReference.PoseData pose) {
            return base.Channel.CreateVirtualVehicleAsync(ipAddress, pose);
        }
        
        public System.Tuple<bool, FleetClients.FleetManagerServiceReference.ServiceCallData> RemoveVehicle(System.Net.IPAddress ipAddress) {
            return base.Channel.RemoveVehicle(ipAddress);
        }
        
        public System.Threading.Tasks.Task<System.Tuple<bool, FleetClients.FleetManagerServiceReference.ServiceCallData>> RemoveVehicleAsync(System.Net.IPAddress ipAddress) {
            return base.Channel.RemoveVehicleAsync(ipAddress);
        }
        
        public System.Tuple<bool, FleetClients.FleetManagerServiceReference.ServiceCallData> SetPose(System.Net.IPAddress ipAddress, FleetClients.FleetManagerServiceReference.PoseData pose) {
            return base.Channel.SetPose(ipAddress, pose);
        }
        
        public System.Threading.Tasks.Task<System.Tuple<bool, FleetClients.FleetManagerServiceReference.ServiceCallData>> SetPoseAsync(System.Net.IPAddress ipAddress, FleetClients.FleetManagerServiceReference.PoseData pose) {
            return base.Channel.SetPoseAsync(ipAddress, pose);
        }
        
        public System.Tuple<bool, FleetClients.FleetManagerServiceReference.ServiceCallData> ResetKingpin(System.Net.IPAddress ipAddress) {
            return base.Channel.ResetKingpin(ipAddress);
        }
        
        public System.Threading.Tasks.Task<System.Tuple<bool, FleetClients.FleetManagerServiceReference.ServiceCallData>> ResetKingpinAsync(System.Net.IPAddress ipAddress) {
            return base.Channel.ResetKingpinAsync(ipAddress);
        }
        
        public System.Tuple<bool, FleetClients.FleetManagerServiceReference.ServiceCallData> SetFleetState(FleetClients.FleetManagerServiceReference.VehicleControllerState controllerState) {
            return base.Channel.SetFleetState(controllerState);
        }
        
        public System.Threading.Tasks.Task<System.Tuple<bool, FleetClients.FleetManagerServiceReference.ServiceCallData>> SetFleetStateAsync(FleetClients.FleetManagerServiceReference.VehicleControllerState controllerState) {
            return base.Channel.SetFleetStateAsync(controllerState);
        }
        
        public System.Tuple<bool, FleetClients.FleetManagerServiceReference.ServiceCallData> SetKingpinState(System.Net.IPAddress ipAddress, FleetClients.FleetManagerServiceReference.VehicleControllerState controllerState) {
            return base.Channel.SetKingpinState(ipAddress, controllerState);
        }
        
        public System.Threading.Tasks.Task<System.Tuple<bool, FleetClients.FleetManagerServiceReference.ServiceCallData>> SetKingpinStateAsync(System.Net.IPAddress ipAddress, FleetClients.FleetManagerServiceReference.VehicleControllerState controllerState) {
            return base.Channel.SetKingpinStateAsync(ipAddress, controllerState);
        }
    }
}
